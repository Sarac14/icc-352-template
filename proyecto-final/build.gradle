plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'

    id 'com.google.protobuf' version '0.8.17' //plugin para incluir la compilación de gRPC, ver: https://github.com/grpc/grpc-java#generated-code
    id 'idea' //plugins para la integración con el IDEA.

}

group = 'org.example'
version = '1.0-SNAPSHOT'

mainClassName = 'org.example.Main'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    //javalin
    implementation("io.javalin:javalin:5.6.1")
    //manejo de log.
    implementation "org.slf4j:slf4j-simple:2.0.3"
    // En la versión 5.3.X separaron las clases del renderizado en otro proyecto
    implementation "io.javalin:javalin-rendering:5.6.1"
    //Librería de plantilla.
    implementation 'org.thymeleaf:thymeleaf:3.1.1.RELEASE'
    //conversion a JSON
//Procesamiento JSON para Javalin.
    implementation("com.fasterxml.jackson.core:jackson-core:2.15.2")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.15.2')
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.2")
    //Librería de MongoDB
    // https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync
    implementation group: 'org.mongodb', name: 'mongodb-driver-sync', version: '4.10.2'

    //librería faker
    implementation 'net.datafaker:datafaker:2.0.1'

    implementation 'com.j2html:j2html:1.6.0'

    implementation("com.melloware:jasypt:1.9.4")
    implementation "javax.servlet:javax.servlet-api:4.0.1"

    implementation 'top.jfunc.json:json-gson:1.8.3'

    //Librerías necesarias para para implementar gRPC y Protobuf, ver: https://github.com/grpc/grpc-java
    implementation 'io.grpc:grpc-netty-shaded:1.39.0'
    implementation 'io.grpc:grpc-protobuf:1.39.0'
    implementation 'io.grpc:grpc-stub:1.39.0'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

}

//Tareas para la generación del código.
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.17.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.39.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }

    generatedFilesBaseDir = "$projectDir/generated"
}

clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file("src/generated");
    }
}

run{
    standardInput = System.in
}


shadowJar{
    archiveBaseName.set("app")
    archiveClassifier.set('')
    archiveVersion.set('')
}

/**
 * tarea necesaria para heroku si optamos por la tarea de Shadowjar
 * en el archivo Procfile debe estar el siguiente comando:
 * web: java -jar build/libs/app.jar
 */
task stage {
    dependsOn shadowJar
}

test {
    useJUnitPlatform()
}